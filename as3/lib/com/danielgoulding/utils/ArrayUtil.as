package com.danielgoulding.utils {	/**	 * @author Dan	 */	public class ArrayUtil {				/**		 * Check if array contains item		 * @param array			: the array		 * @param item			: the item to check		 * @return				: Boolean		 */		public static function ContainsItem( array:Array, item:* ) : Boolean {			var i:int;			var n:int = array.length;			for ( i=0; i<n; i++ ) {				if ( array[i] === item ){					return true;				}			}			return false;		}				/**		 * Remove item from array		 * @param array			: the array		 * @param item			: the item to remove		 * @return				: the array minus removed item		 */		public static function RemoveItem( array:Array, item:* ) : Array {			var i:int;			var n:int = array.length;			for ( i=0; i<n; i++ ) {				if ( array[i] === item ){					return array.splice( i, 1 );				}			}			return array;		}				/**		 * AlternateSort:		 * @example	:		 * 		converts:	[1,2,3,4,5,6,7,8,9]		 * 		to:			[1,3,5,7,9,8,6,4,2]		 */		public static function AlternateSort(array:Array):Array{					    if (!array || array.length == 0)		    	return array;		    		    // sort:		    var sortedArray:Array = [];		    var bool:Boolean = true;		    var i:int;		    var n:int = array.length;		    for (i=0; i<n; i+=2){		    	sortedArray.push( array[i] );		    }		    for (i=n-1; i>=0; i--){		    	if ( !ContainsItem( sortedArray, array[i] ) ){		    		sortedArray.push( array[i] );		    	}		    }		    		    return sortedArray;		}				/**		 * Sort array by closest index:		 */		public static function SortClosestIndex(index:int, array:Array):Array{						// cannot sort on an index that array does nt have:		    if (!array[index])		    	return null;		    		    // sort:		    var sortedArray:Array = [];		    var currentIndex:int = index;		    var m:int = 1;		    var i:int;		    var n:int = array.length;		    for (i=0; i<n; i++){		    	m = -m;		    	currentIndex += i * m;		    	currentIndex = LimitIndex(currentIndex, array);		    	sortedArray[i] = array[currentIndex];		    }		    		    return sortedArray;		}				/**		 * returns valid index		 */		public static function LimitIndex(index:int, array:Array):int{			var n:int = array.length;	    	if (index >= n){	    		index -= n;	    	}else if (index < 0){	    		index +=n;	    	}	    				return index;		}									}}