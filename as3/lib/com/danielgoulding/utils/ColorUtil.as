package com.danielgoulding.utils {	import flash.display.DisplayObject;	import flash.geom.ColorTransform;			/**	 * @author Daniel Goulding <daniel.goulding@yeahlove.co.uk>	 * 	 */	public class ColorUtil {				/**		 * Sets the display object with color - can be 24bit or 32 bit hex value		 * @param displayObject	: the display object to be tinted		 * @param color			: the color to tint the display object with		 */		public static function SetColor(displayObject:DisplayObject, color:uint):void{			var colors:Object = GetRGBFromHEX(color);			if (!colors['alpha']){				colors['alpha'] = Math.floor(displayObject.alpha * 255);			}			var colorTransform:ColorTransform = new ColorTransform(0, 0, 0, 0, colors['red'], colors['green'], colors['blue'], colors['alpha']);			displayObject.transform.colorTransform = colorTransform;		}				/**		 * Tints display object with color - can be 24bit or 32 bit hex value		 * @param displayObject	: the display object to be tinted		 * @param color			: the color to tint the display object with		 * @param amount		: the amount of the tint (0.0-1.0)		 */		public static function Tint(displayObject:DisplayObject, color:uint, amount:Number):void{			amount = MathUtil.Clamp( amount, 0, 1 );			var colors:Object = GetRGBFromHEX(color);			colors['red'] = ( colors['red'] * 2 - 255 ) * amount;			colors['green'] = ( colors['green'] * 2 - 255 ) * amount;			colors['blue'] = ( colors['blue'] * 2 - 255 ) * amount;			var colorTransform:ColorTransform = new ColorTransform( 1, 1, 1, 1, colors['red'], colors['green'], colors['blue'], 0 );			displayObject.transform.colorTransform = colorTransform;		}				/**		 * Get RGB equivalent value from Hexidecimal 24 or 32 bit value		 * @param color			: Hex value to be converted		 * @return				: object of color values		 */		public static function GetRGBFromHEX(color:uint):Object {			if (String(color).length > 8){				return GetRGBFromHEX32(color);			}else{				return GetRGBFromHEX32(color);			} 		}				/**		 * Get RGB equivalent value from Hexidecimal 32 bit value		 * @param color			: Hex value to be converted		 * @return				: object of color values		 */		public static function GetRGBFromHEX32(color:uint):Object {			var alpha:uint = color >> 24 & 0xFF;			var red:uint = color >> 16 & 0xff;			var green:uint = color >> 8 & 0xFF;			var blue:uint = color & 0xFF;			return {alpha:alpha, red:red, green:green, blue:blue};		}				/**		 * Get RGB equivalent value from Hexidecimal 24 bit value		 * @param color			: Hex value to be converted		 * @return				: object of color values		 */		public static function GetRGBFromHex24(color:uint):Object {			var red:uint = color >> 16 & 0xff;			var green:uint = color >> 8 & 0xFF;			var blue:uint = color & 0xFF;			return {red:red, green:green, blue:blue};		}				/**		 * Get 24 bit Hexidecimal equivalent value from RGB value		 * @param red			: red value (0-255)		 * @param blue			: blue value (0-255)		 * @param green			: green value (0-255)		 */		public static function GetHex24FromRGB(red:uint, green:uint, blue:uint):Number {			return (red<<16 | green<<8 | blue);		}				/**		 * Get 32 bit Hexidecimal equivalent value from RGB value		 * @param alpha			: alpha value (0-255)		 * @param red			: red value (0-255)		 * @param blue			: blue value (0-255)		 * @param green			: green value (0-255)		 */		public static function GetHex32FromRGB(alpha:Number, red:Number, green:Number, blue:Number):Number {			return (alpha<<24 | red<<16 | green<<8 | blue);		}			}}