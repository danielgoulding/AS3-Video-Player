package com.danielgoulding.utils {	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.geom.Transform;	import flash.net.LocalConnection;	/**	 * @author Dan	 */	public class GeneralUtil {				/**		 * Apply propertis to an object:		 */		public static function ApplyProperties(obj:Object, props:Object):Object{			for(var p:* in props) {				try{					obj[p] = props[p];				}				catch( error:Error ) {					trace( error.message ); 				}			}			return obj;		}				/**		 * Recursively trace properties of an object:		 */		public static function TraceObject( object:Object, prefix:String="" ):void{			for ( var p:String in object ){				if ( typeof( object[p] ) == "object" ){					trace( prefix + p + ": [Object]");					TraceObject( Object( object[p] ), prefix + "	" );				}else{					trace( prefix + p + ": " + object[p] );				}			}		}				/**		 * Recursively adds properties of an object to string:		 */		public static function ObjectToString( object:Object ):String{			var string:String = "<Object";			for ( var p:String in object ){				if ( typeof( object[p] ) == "object" ){					string += ObjectToString( Object( object[p] ) );				}else{					string += " " + p + "='" + object[p] + "'";				}			}			string += " />";			return string;		}				/**		 * Force garbage collection		 */		public static function GarbageCollect():void{			try {			   new LocalConnection().connect('foo');			   new LocalConnection().connect('foo');			} catch (e:*) {}			}				/**		 * Dispose of display object:		 */		public static function DisposeDisplayObject(disposeObject:DisplayObject, container:DisplayObjectContainer = null):void{			if (disposeObject && container && container.contains(disposeObject))				container.removeChild(disposeObject);			disposeObject = null;		}				/**		 * Clones Sprite:		 * @param target the Sprite to duplicate		 * @return a duplicate instance of Sprite		 */		public static function CloneSprite( target:Sprite ):Sprite{			return CloneDisplayObject( target ) as Sprite;		}				/**		 * Clones MovieClip:		 * @param target the MovieClip to duplicate		 * @return a duplicate instance of sprite		 */		public static function CloneMovieClip( target:MovieClip ):MovieClip{			return CloneDisplayObject( target as DisplayObject ) as MovieClip;		}				/**		 * Return object from object array if matches id		 * @param id		: the id to be matched		 * @param objArray	: the object array to search		 * @return the object found in the array		 */        public static function GetOjectById( id:int, objArray:Array ):Object{        	var i:int;        	var n:int = objArray.length;        	for ( i=0; i<n; i++){        		if ( id == objArray[ i ][ 'id' ] ){        			return objArray[ i ];        		}        	}        	return null;        }        		/**		 * Return index from object array if matches id		 * @param id		: the id to be matched		 * @param objArray	: the object array to search		 * @return the index of the object found in the array		 */        public static function GetIndexById( id:int, objArray:Array ):Object{        	var i:int;        	var n:int = objArray.length;        	for ( i=0; i<n; i++){        		if ( id == objArray[ i ][ 'id' ] ){        			return i;        		}        	}        	return null;        }        				/**		 * Clone display object:		 * @param target the display object to duplicate		 * @return a duplicate instance of target		 */		public static function CloneDisplayObject( target:DisplayObject ):DisplayObject{			var TargetClass:Class = Object( target ).constructor as Class;			var duplicate:DisplayObject = new TargetClass();			duplicate.transform = target.transform;			duplicate.filters = target.filters;			duplicate.cacheAsBitmap = target.cacheAsBitmap;			duplicate.opaqueBackground = target.opaqueBackground;						if ( target.scale9Grid ) {				var rect:Rectangle = target.scale9Grid;				duplicate.scale9Grid = rect;			}			return duplicate;		}				/**		 * This function works like DisplayObject.getBounds(), except it will find the full		 * bounds of any display object, even after its scrollRect has been set.		 *		 * @param displayObject - a display object that may have a scrollRect applied		 * @return a rectangle describing the dimensions of the unmasked content		 */		public static function getFullBounds ( displayObject:DisplayObject ) :Rectangle {			var bounds:Rectangle, transform:Transform, toGlobalMatrix:Matrix, currentMatrix:Matrix;			transform = displayObject.transform;			currentMatrix = transform.matrix;			toGlobalMatrix = transform.concatenatedMatrix;			toGlobalMatrix.invert();			transform.matrix = toGlobalMatrix;			bounds = transform.pixelBounds.clone();			transform.matrix = currentMatrix;			return bounds;		}	}}