package com.danielgoulding.utils {	/**	 * @author Dan	 */	public class NumberUtil {		/**		 * Clamp number between two values:		 * @param value			: the number to be clamped		 * @param min			: the minimum value		 * @param max			: the max value		 * @return				: the clamped value		 * @example		 * 		NumberUtil.Clamp( 20, 100, 300 ); (returns 100)		 */		public static function Clamp( value:Number, min:Number, max:Number ):Number{			if ( value < min ){				value = min;			}			if ( value > max ){				value = max;			}			return value;		}		/**		 * Get time array from seconds		 * @param seconds		: number in seconds		 * @return				: time object		 * @example		 * 		NumberUtil.GetTimeFromSeconds( 34534 ); (returns )		 */		public static function GetTimeFromSeconds( seconds:Number ):Object{			var timeObj:Object = {};			var multiplier:int = seconds < 0 ? -1 : 1;			seconds *= multiplier;			timeObj['years'] = Math.floor( seconds / (365*24*3600) );			seconds -= timeObj['years'] * (365*24*3600);			timeObj['days'] = Math.floor( seconds / (24*3600) );			seconds -= timeObj['days'] * (24*3600);			timeObj['hours'] = Math.floor( seconds / (3600) );			seconds -= timeObj['hours'] * (3600);			timeObj['minutes'] = Math.floor( seconds / (60) );			seconds -= timeObj['minutes'] * (60);			timeObj['seconds'] = Math.floor( seconds );			seconds -= timeObj['seconds'];			timeObj['milliseconds'] = Math.floor( seconds * 1000 );			return timeObj;		}		/**		 * Add leading zeroes to a number		 * @param num			: the number		 * @return				: a string with leading zero		 */		public static function addLeadingZeroes( num:Number ):String {			return num < 10 ? "0" + String( num ) : String( num );		}	}}