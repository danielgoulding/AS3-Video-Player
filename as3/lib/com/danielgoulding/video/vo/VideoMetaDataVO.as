package com.danielgoulding.video.vo {		/**	 * @author danielgoulding	 */	public class VideoMetaDataVO {				//----------------------------------------------------------------------		//  VARIABLES:		//----------------------------------------------------------------------				private var _duration				: Number;	// duration of the video file, in seconds.		private var _audiodatarate			: Number;	// rate at which audio was encoded, in kilobytes per second.		private var _videodatarate			: Number;	// rate at which video was encoded, in kilobytes per second.		private var _audiocodecid			: String;	// the audio codec id		private var _canSeekToEnd			: Boolean;	// seek to the end of a progressive download		private var _width					: Number;	// width of the video file, in pixels.		private var _height					: Number;	// height of the video file, in pixels.		private var _audiodelay				: Number;	// "time 0" of the original video file. ( to synchronize the audio )		private var _framerate				: Number;	// video frames per second		private var _videocodecid			: String;	// video codec id		private var _aacaot					: int;		// AAC audio object type; 0, 1, or 2		private var _avclevel				: int;		// AVC IDC level number such as 10, 11, 20, 21...		private var _avcprofile				: int;		// AVC profile number such as 55, 77, 100...		private var _cuePoints				: Array;	// An array of cuepoint objects		private var _seekpoints				: Array;	// An array that lists the available keyframes as timestamps in milliseconds		private var _tags					: Array;	// An array of key-value pairs that represent the information in the "list" atom, which is the equivalent of ID3 tags for MP4 files. iTunes uses these tags. Can be used to display artwork, if available.		private var _trackinfo				: Object;	// Information on all the tracks in MP4 file, including their sample description ID.		private var _videoframerate			: Number;	// Framerate of the MP4 video		private var _moovposition			: int;		// 		private var _audioChannels			: int;		// 		private var _hasAudio				: Boolean;	// 		private var _hasVideo				: Boolean;	// 		private var _lasttimestamp			: Number;	// 		private var _filesize				: Number;	// 		private var _keyframes				: Object;	// 		private var _audiosize				: Number;	// 		private var _hasMetadata			: Boolean;	// 		private var _videosize				: Number;	// 		private var _audiosamplerate		: Number;	// 		private var _audiosamplesize		: Number;	// 		private var _metadatacreator		: String;	// 		private var _hasCuePoints			: Boolean;	// 		private var _stereo					: Boolean;	// 		private var _datasize				: Number;	// 		private var _lastkeyframetimestamp	: Number;	// 		private var _hasKeyframes			: Boolean;	// 		private var _metadatadate			: Date;		// 		//----------------------------------------------------------------------		//  CONSTRUCTOR:		//----------------------------------------------------------------------				public function VideoMetaDataVO( properties:Object=null ):void {			if ( properties )				setProperties( properties );		}				//----------------------------------------------------------------------		//  PUBLIC API:		//----------------------------------------------------------------------				public function setProperties( properties:Object ):void{						if ( properties['duration'] != null )				duration = properties['duration'];							if ( properties['audiodatarate'] != null )				audiodatarate = properties['audiodatarate'];							if ( properties['videodatarate'] != null )				videodatarate = properties['videodatarate'];							if ( properties['audiocodecid'] != null )				audiocodecid = properties['audiocodecid'];							if ( properties['canSeekToEnd'] != null )				canSeekToEnd = properties['canSeekToEnd'];							if ( properties['width'] != null )				width = properties['width'];							if ( properties['height'] != null )				height = properties['height'];							if ( properties['audiodelay'] != null )				audiodelay = properties['audiodelay'];							if ( properties['framerate'] != null )				framerate = properties['framerate'];							if ( properties['videocodecid'] != null )				videocodecid = properties['videocodecid'];							if ( properties['aacaot'] != null )				aacaot = properties['aacaot'];							if ( properties['avclevel'] != null )				avclevel = properties['avclevel'];							if ( properties['avcprofile'] != null )				avcprofile = properties['avcprofile'];							if ( properties['cuePoints'] != null )				cuePoints = properties['cuePoints'];							if ( properties['seekpoints'] != null )				seekpoints = properties['seekpoints'];							if ( properties['tags'] != null )				tags = properties['tags'];							if ( properties['trackinfo'] != null )				trackinfo = properties['trackinfo'];							if ( properties['videoframerate'] != null )				videoframerate = properties['videoframerate'];							if ( properties['moovposition'] != null )				moovposition = properties['moovposition'];							if ( properties['audioChannels'] != null )				audioChannels = properties['audioChannels'];							if ( properties['audiochannels'] != null )				audiochannels = properties['audiochannels'];							if ( properties['hasAudio'] != null )				hasAudio = properties['hasAudio'];							if ( properties['hasVideo'] != null )				hasVideo = properties['hasVideo'];							if ( properties['lasttimestamp'] != null )				lasttimestamp = properties['lasttimestamp'];							if ( properties['filesize'] != null )				filesize = properties['filesize'];							if ( properties['keyframes'] != null )				keyframes = properties['keyframes'];							if ( properties['audiosize'] != null )				audiosize = properties['audiosize'];							if ( properties['hasMetadata'] != null )				hasMetadata = properties['hasMetadata'];							if ( properties['videosize'] != null )				videosize = properties['videosize'];							if ( properties['audiosamplerate'] != null )				audiosamplerate = properties['audiosamplerate'];							if ( properties['audiosamplesize'] != null )				audiosamplesize = properties['audiosamplesize'];							if ( properties['metadatacreator'] != null )				metadatacreator = properties['metadatacreator'];							if ( properties['hasCuePoints'] != null )				hasCuePoints = properties['hasCuePoints'];							if ( properties['stereo'] != null )				stereo = properties['stereo'];							if ( properties['datasize'] != null )				datasize = properties['datasize'];							if ( properties['lastkeyframetimestamp'] != null )				lastkeyframetimestamp = properties['lastkeyframetimestamp'];							if ( properties['hasKeyframes'] != null )				hasKeyframes = properties['hasKeyframes'];							if ( properties['metadatadate'] != null )				metadatadate = properties['metadatadate'];		}				public function toString():String{			var string:String = "<VideoMetaDataVO:" + 			"  width='" + width + "' height='" + height + "' framerate='" + framerate + 			"' duration='" + duration + "' canSeekToEnd='" + canSeekToEnd + "' audiodelay='" + audiodelay + 			"' audiodatarate='" + audiodatarate + "' videodatarate='" + videodatarate + 			"' audiocodecid='" + audiocodecid + "' videocodecid='" + videocodecid + 			"' aacaot='" + aacaot + "' avclevel='" + avclevel + "' avcprofile='" + avcprofile + 			"' cuePoints='" + cuePoints + "' seekpoints='" + seekpoints + "' tags='" + tags + 			"' trackinfo='" + trackinfo + "' videoframerate='" + videoframerate + 			"' moovposition='" + moovposition + "' audioChannels='" + audioChannels + 			"' hasAudio='" + hasAudio + "' hasVideo='" + hasVideo + 			"' lasttimestamp='" + lasttimestamp + "' filesize='" + filesize + 			"' keyframes='" + keyframes + "' audiosize='" + audiosize + 			"' hasMetadata='" + hasMetadata + "' videosize='" + videosize + 			"' audiosamplerate='" + audiosamplerate + "' audiosamplesize='" + audiosamplesize + 			"' metadatacreator='" + metadatacreator + "' hasCuePoints='" + hasCuePoints + 			"' datasize='" + datasize + "' lastkeyframetimestamp='" + lastkeyframetimestamp + 			"' hasKeyframes='" + hasKeyframes + "' metadatadate='" + metadatadate + 			"' />";			return string;		}				//----------------------------------------------------------------------		//  GET / SET:		//----------------------------------------------------------------------				public function get duration() : Number {			return _duration;		}		public function set duration( value:Number ) : void {			_duration = value;		}				public function get audiodatarate() : Number {			return _audiodatarate;		}		public function set audiodatarate( value:Number ) : void {			_audiodatarate = value;		}				public function get videodatarate() : Number {			return _videodatarate;		}		public function set videodatarate( value:Number ) : void {			_videodatarate = value;		}				public function get audiocodecid() : String {			return _audiocodecid;		}		public function set audiocodecid( value:String ) : void {			_audiocodecid = value;		}				public function get canSeekToEnd() : Boolean {			return _canSeekToEnd;		}		public function set canSeekToEnd( value:Boolean ) : void {			_canSeekToEnd = value;		}				public function get width() : Number {			return _width;		}		public function set width( value:Number ) : void {			_width = value;		}				public function get height() : Number {			return _height;		}		public function set height( value:Number ) : void {			_height = value;		}				public function get audiodelay() : Number {			return _audiodelay;		}		public function set audiodelay( value:Number ) : void {			_audiodelay = value;		}				public function get framerate() : Number {			return _framerate;		}		public function set framerate( value:Number ) : void {			_framerate = value;		}				public function get videocodecid() : String {			return _videocodecid;		}		public function set videocodecid( value:String ) : void {			_videocodecid = value;		}				public function get aacaot() : int {			return _aacaot;		}		public function set aacaot( value:int ) : void {			_aacaot = value;		}				public function get avclevel() : int {			return _avclevel;		}		public function set avclevel( value:int ) : void {			_avclevel = value;		}				public function get avcprofile() : int {			return _avcprofile;		}		public function set avcprofile( value:int ) : void {			_avcprofile = value;		}				public function get cuePoints() : Array {			return _cuePoints;		}		public function set cuePoints( value:Array ) : void {			_cuePoints = value;		}				public function get seekpoints() : Array {			return _seekpoints;		}		public function set seekpoints( value:Array ) : void {			_seekpoints = value;		}				public function get tags() : Array {			return _tags;		}		public function set tags( value:Array ) : void {			_tags = value;		}				public function get trackinfo() : Object {			return _trackinfo;		}		public function set trackinfo( value:Object ) : void {			_trackinfo = value;		}				public function get videoframerate() : Number {			return _videoframerate;		}		public function set videoframerate( value:Number ) : void {			_videoframerate = value;		}				public function get moovposition() : int {			return _moovposition;		}		public function set moovposition( value:int ) : void {			_moovposition = value;		}				public function get audioChannels() : int {			return _audioChannels;		}		public function set audioChannels( value:int ) : void {			_audioChannels = value;		}				public function get audiochannels() : int {			return _audioChannels;		}		public function set audiochannels( value:int ) : void {			_audioChannels = value;		}				public function get hasAudio() : Boolean {			return _hasAudio;		}		public function set hasAudio(hasAudio : Boolean) : void {			_hasAudio = hasAudio;		}				public function get hasVideo() : Boolean {			return _hasVideo;		}		public function set hasVideo(hasVideo : Boolean) : void {			_hasVideo = hasVideo;		}				public function get lasttimestamp() : Number {			return _lasttimestamp;		}		public function set lasttimestamp(lasttimestamp : Number) : void {			_lasttimestamp = lasttimestamp;		}				public function get filesize() : Number {			return _filesize;		}		public function set filesize(filesize : Number) : void {			_filesize = filesize;		}				public function get keyframes() : Object {			return _keyframes;		}		public function set keyframes(keyframes : Object) : void {			_keyframes = keyframes;		}				public function get audiosize() : Number {			return _audiosize;		}		public function set audiosize(audiosize : Number) : void {			_audiosize = audiosize;		}				public function get hasMetadata() : Boolean {			return _hasMetadata;		}		public function set hasMetadata(hasMetadata : Boolean) : void {			_hasMetadata = hasMetadata;		}				public function get videosize() : Number {			return _videosize;		}		public function set videosize(videosize : Number) : void {			_videosize = videosize;		}				public function get audiosamplerate() : Number {			return _audiosamplerate;		}		public function set audiosamplerate(audiosamplerate : Number) : void {			_audiosamplerate = audiosamplerate;		}				public function get audiosamplesize() : Number {			return _audiosamplesize;		}		public function set audiosamplesize(audiosamplesize : Number) : void {			_audiosamplesize = audiosamplesize;		}				public function get metadatacreator() : String {			return _metadatacreator;		}		public function set metadatacreator(metadatacreator : String) : void {			_metadatacreator = metadatacreator;		}				public function get hasCuePoints() : Boolean {			return _hasCuePoints;		}		public function set hasCuePoints(hasCuePoints : Boolean) : void {			_hasCuePoints = hasCuePoints;		}				public function get stereo() : Boolean {			return _stereo;		}		public function set stereo(stereo : Boolean) : void {			_stereo = stereo;		}				public function get datasize() : Number {			return _datasize;		}		public function set datasize(datasize : Number) : void {			_datasize = datasize;		}				public function get lastkeyframetimestamp() : Number {			return _lastkeyframetimestamp;		}		public function set lastkeyframetimestamp(lastkeyframetimestamp : Number) : void {			_lastkeyframetimestamp = lastkeyframetimestamp;		}				public function get hasKeyframes() : Boolean {			return _hasKeyframes;		}		public function set hasKeyframes(hasKeyframes : Boolean) : void {			_hasKeyframes = hasKeyframes;		}				public function get metadatadate() : Date {			return _metadatadate;		}		public function set metadatadate(metadatadate : Date) : void {			_metadatadate = metadatadate;		}	}}